[{"title":"梆梆加固分析(一)","url":"/2025/04/09/bangbang_protect_1/","content":"java层JAVA层的代码量不多, 在attachBaseContext 方法中调用了load方法，具体是加载了一个名为DexHelper的动态库。\n\n\ndoAttach方法使用反射调用了app的代码。说明在加载DexHelper后就已经完成了DEX的释放。接下来分析DexHelper.so\n\n修复DexHelper.so\nIDA打开后可以很明显的看到文件代码段被加密了。.init_proc会在so被加载时执行并完成文件的解密，所以我们只需要HOOK dlopen将DexHelper给dump下来就能得到解密后的so。（也可以调试让程序执行.init_proc然后dump）。\n//frida -U -f &quot;com.chaoxing.mobile&quot; -l dump.jsfunction hook_dlopen()&#123;    var filename = &quot;libDexHelper.so&quot;;    Interceptor.attach(Module.findExportByName(null, &quot;android_dlopen_ext&quot;), &#123;        onEnter: function(args) &#123;            if(args[0] != null)&#123;                console.log(&#x27;dlopen called with filename: &#x27; + Memory.readUtf8String(args[0]));                let filepath = Memory.readUtf8String(args[0])                if(filepath.includes(filename))&#123;                   this.loaded = 1;                &#125;            &#125;        &#125;,        onLeave: function(retval)&#123;            console.log(&quot;return&quot;)            if(this.loaded == 1)&#123;                dump_so(filename);                this.loaded = 0;            &#125;            return retval;      &#125;    &#125;    );&#125;function dump_so(filename)&#123;    var handle = Process.getModuleByName(filename);    console.log(&quot;[dumping...........]&quot;);    var path = &quot;/data/data/com.chaoxing.mobile/&quot; + handle.name + &quot;_&quot; + handle.base + &quot;_&quot; + ptr(handle.size) + &quot;.so&quot;;    var file_handle = new File(path, &quot;wb&quot;);    if(!file_handle) &#123;        console.log(&quot;[dump] failed to open file&quot;);    &#125;        Memory.protect(ptr(handle.base), handle.size, &#x27;rwx&#x27;);        var libbuffer = ptr(handle.base).readByteArray(handle.size);        file_handle.write(libbuffer);        file_handle.close();        console.log(&quot;[dump] finished path is &quot; + path);    &#125;setImmediate(hook_dlopen);\n\n然后修复一下ELF文件，我使用了https://github.com/Chenyangming9/SoFixer#。\n\nJNI_OnLoad文件的函数名很多都被混淆了，可以写个idapython脚本恢复函数名。\nimport idautilsimport idcdef rename_functions():    for func_ea in idautils.Functions():        old_name = idc.get_func_name(func_ea)        if old_name.startswith(&quot;pS&quot;) or old_name.startswith(&quot;p5&quot;) or old_name.startswith(&quot;5&quot;) or old_name.startswith(&quot;S&quot;):            new_name = f&quot;sub_&#123;func_ea:X&#125;&quot;        else:            continue  # 不是混淆函数名，跳过        if idc.set_name(func_ea, new_name, idc.SN_NOWARN):            print(f&quot;[+] Renamed: &#123;old_name&#125; -&gt; &#123;new_name&#125; (0x&#123;func_ea:X&#125;)&quot;)# 运行脚本rename_functions()\n\n初始化部分JNI_OnLoad首先注册了一些Native方法，接着对设备运行的环境，包括android版本，android虚拟机类型等进行了一系列的检测。\ncom/secneo/apkwrapper/H    (Ljava/lang/String;)I  he    (Ljava/lang/String;I)V gha    (I)V sha    (Ljava/lang/String;)Ljava/lang/String; dcom/secneo/apkwrapper/AW    (Landroid/content/Context;Landroid/app/Application;)V hn    ()V pn\n\nsub_31278这个函数是加固的核心函数，包括了对libc的hook , 反调试和检测，以及对dex文件的解密等。\n检测分析sub_430C0的函数对libc.so进行了hook,主要hook了read,open,write,mmap等函数。\nsub_4C908中位于偏移0x52BC4的函数向frida-server发送AUTH\\r\\n，检测REJECT。\n\nsub_4CB6C中实现了对环境的检测。包括对root权限，magisk, su等的检测。\n\n之后pthread_create创建了一个线程，函数sub_52EA0 fork了一个子进程并且通过execl启动Java层的检测，主要检测了&#x2F;proc&#x2F;pid&#x2F;status&#x3D;&#x3D;&gt;TracerPid。\n\nsub_4D638函数实现了对hook框架，CLASSPATH的检测，通过对比libart.so中导出函数的前16字节判断是否被修改。\n\nsub_4E308函数主要负责检测虚拟环境，模拟器等。\n\n\n调试器检测主要通过sub_56C10函数来实现，检测&#x2F;proc&#x2F;pid&#x2F;status目录下的TracerPid是否为pid和State字段是否T (stopped)。\n\nDEX文件解密被加密的数据位于最大的dex中，以dexdata0作为标志。搜索dexdata0可以定位到解密并释放Dex的函数。函数偏移为0x3199C.\n\n\n解密函数位于偏移0x38E04，这里会循环解密dex数据。每次申请了0x20000大小的空间，然后将解密后的数据放在其中。解密函数的三个参数分别是密文，解密数据，密钥。事实上在这里就可以dump获取解密的dex文件了。\n\n接着会调用makeInMemoryDexElements，它的作用是将内存中的 DEX 数据（如一个 ByteBuffer 数组）转换为可被类加载器使用的 DexPathList.Element 数组  。\n\n最后调用DexFileLoader::Load加载Dex。\n\n总结：\n简单地分析了这个加固的样本，主要关注了壳的检测部分以及dex文件的解密部分，第一次分析企业版加固，应该还有很多地方没有分析到，VMP的代码位于libdexjni.so，奈何对vmp的了解不多，只能暂时搁置。\n参考：\nhttps://www.cnblogs.com/2014asm/p/14547218.html 梆梆APP加固产品方案浅析\nhttps://bbs.kanxue.com/thread-280513.htm 脱壳纪事——梆梆企业版（一）\n","categories":["逆向"],"tags":["脱壳","android"]}]